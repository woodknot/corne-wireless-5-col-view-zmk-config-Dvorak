/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

//#define AS(keycode) &as LS(keycode) keycode

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    //    behaviors {
    //        as: auto_shift {
    //            compatible = "zmk,behavior-hold-tap";
    //            #binding-cells = <2>;
    //            tapping_term_ms = <200>;
    //            quick_tap_ms = <0>;
    //            flavor = "tap-preferred";
    //            bindings = <&kp>, <&kp>;
    //        };
    //    };

    combos {
        compatible = "zmk,combos";

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <21 22>;
            layers = <0 1 2>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
            layers = <0 1 2>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
            layers = <0 1 2>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            layers = <0 1 2 3>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <29 28>;
            layers = <0>;
        };

        grave_tilde {
            bindings = <&kp GRAVE>;
            key-positions = <0 10>;
            layers = <0>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
            layers = <0 1 2>;
        };

        question {
            bindings = <&kp QMARK>;
            key-positions = <1 2>;
        };

        Del {
            bindings = <&kp DEL>;
            key-positions = <8 7>;
        };

        LBracket {
            bindings = <&kp LPAR>;
            key-positions = <3 4>;
            layers = <0 2>;
        };

        RBracket {
            bindings = <&kp RPAR>;
            key-positions = <5 6>;
            layers = <0 2>;
        };

        LBrace {
            bindings = <&kp LBRC>;
            key-positions = <13 14>;
            layers = <0>;
        };

        RBrace {
            bindings = <&kp RBRC>;
            key-positions = <15 16>;
            layers = <0>;
        };

        app_calc {
            bindings = <&kp C_AL_CALC>;
            key-positions = <24 14>;
            layers = <0 2>;
        };

        caps {
            bindings = <&kp CAPS>;
            key-positions = <10 11>;
            layers = <0>;
        };

        ThumbShift1 {
            bindings = <&kp EXCLAMATION>;
            key-positions = <10 33>;
            layers = <0>;
        };

        ThumbShift2 {
            bindings = <&kp AT_SIGN>;
            key-positions = <11 33>;
            layers = <0>;
        };

        ThumbShift3 {
            bindings = <&kp HASH>;
            key-positions = <12 33>;
            layers = <0>;
        };

        ThumbShift4 {
            bindings = <&kp DOLLAR>;
            key-positions = <33 13>;
            layers = <0>;
        };

        ThumbShift5 {
            bindings = <&kp PERCENT>;
            key-positions = <33 14>;
            layers = <0>;
        };

        ThumbShift6 {
            bindings = <&kp CARET>;
            key-positions = <15 32>;
            layers = <0>;
        };

        ThumbShift7 {
            bindings = <&kp AMPERSAND>;
            key-positions = <16 32>;
            layers = <0>;
        };

        ThumbShift8 {
            bindings = <&kp ASTERISK>;
            key-positions = <17 32>;
            layers = <0>;
        };

        ThumbShift9 {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <18 32>;
            layers = <0>;
        };

        ThumbShift0 {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 32>;
            layers = <0>;
        };

        PrtScn {
            bindings = <&kp PSCRN>;
            key-positions = <2 3>;
            layers = <0>;
        };

        homeCombo {
            bindings = <&kp HOME>;
            key-positions = <8 18>;
            layers = <0>;
        };

        endCombo {
            bindings = <&kp END>;
            key-positions = <9 19>;
            layers = <0>;
        };

        volDown {
            bindings = <&kp C_VOL_DN>;
            key-positions = <35 27>;
            layers = <0>;
        };

        volUp {
            bindings = <&kp C_VOL_UP>;
            key-positions = <35 28>;
            layers = <0>;
        };

        volMute {
            bindings = <&kp C_MUTE>;
            key-positions = <35 29>;
            layers = <0>;
        };

        ThumbNum1 {
            bindings = <&kp NUMBER_1>;
            key-positions = <32 10>;
        };

        ThumbNum2 {
            bindings = <&kp NUMBER_2>;
            key-positions = <32 11>;
        };

        ThumbNum3 {
            bindings = <&kp NUMBER_3>;
            key-positions = <32 12>;
        };

        ThumbNum4 {
            bindings = <&kp NUMBER_4>;
            key-positions = <32 13>;
        };

        ThumbNum5 {
            bindings = <&kp N5>;
            key-positions = <32 14>;
        };

        ThumbNum6 {
            bindings = <&kp NUMBER_6>;
            key-positions = <33 15>;
        };

        ThumbNum7 {
            bindings = <&kp N7>;
            key-positions = <33 16>;
        };

        ThumbNum8 {
            bindings = <&kp N8>;
            key-positions = <33 17>;
        };

        ThumbNum9 {
            bindings = <&kp N9>;
            key-positions = <33 18>;
        };

        ThumbNum0 {
            bindings = <&kp N0>;
            key-positions = <33 19>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U   |  I   |  O   | P |
            // |  A  |  S  |  D  |  F  |  G  |     |  H  |  J   |  K   |  L   | ' | 
            // |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M   | CTRL | META | . |
            //             | GUI | LWR | SPC |     | ENT | RSE  | BSPC |

            display-name = "Dvorak";
            bindings = <
  &mt LALT SQT         &kp COMMA  &kp DOT       &kp P           &kp Y              &kp F        &kp G             &kp C        &kp R  &kp L
  &kp A                &kp O      &kp E         &kp U           &kp I              &kp D        &kp H             &kp T        &kp N  &kp S
  &mt LCTRL SEMICOLON  &kp Q      &kp J         &kp K           &kp X              &kp B        &kp M             &kp W        &kp V  &mt RCTRL Z
                                  &mt LWIN TAB  &mt LSHIFT DEL  &lt 1 BACKSPACE    &lt 2 MINUS  &mt RSHIFT SPACE  &lt 3 ENTER
            >;
        };

        nav_symb {
            // -----------------------------------------------------------------------------------------
            // | 1! |  2@ |  3# |  4$ |  5% |     |  6^ |  7& |  8* |  9(  |  0)  |
            // | -_ |  =+ |  {  |  [  |  (  |     |  )  |  ]  |  }  |  /?  |  \|  |
            // | `~ |     |     |  ,< |  :  |     |  ;  |  .> | CTRL| META |      |
            //            | GUI | ESC | SPC |     | ENT |     | TAB |

            display-name = "NavSym";
            bindings = <
  &lt 4 HOME    &kp PSCRN  &kp UP         &kp K_UNDO  &kp LC(X)    &none             &kp LPAR        &kp RPAR           &kp SLASH       &kp QMARK
  &mt LWIN END  &kp LEFT   &kp DOWN       &kp RIGHT   &kp LC(C)    &kp EQUAL         &mt RCTRL LBRC  &mt RSHFT RBRC     &mt RSHFT BSLH  &mt RCTRL PIPE
  &kp LCTRL     &kp LSHFT  &kp LALT       &kp LWIN    &kp LC(V)    &none             &mt LWIN LBKT   &mt RALT RBKT      &kp RSHFT       &mt LCTRL QMARK
                           &kp BACKSPACE  &kp ESC     &none        &kp LG(LS(LEFT))  &kp RWIN        &kp LS(LG(RIGHT))
            >;
        };

        num_fn_audio {
            bindings = <
  &kp F1           &kp F2     &kp F3     &kp F4     &kp F5            &kp F6          &kp F7    &kp F8             &kp F9              &lt 4 F10
  &kp N1           &kp N2     &kp N3     &kp N4     &kp N5            &kp N6          &kp N7    &kp N8             &kp N9              &kp N0
  &mt LCTRL COLON  &kp LSHFT  &kp LALT   &kp MINUS  &mt LWIN SLASH    &mt LWIN ASTRK  &kp PLUS  &mt RALT C_VOL_DN  &mt RSHFT C_VOL_UP  &mt RCTRL C_MUTE
                              &kp COMMA  &kp DOT    &kp EQUAL         &none           &kp ESC   &kp ENTER
            >;

            label = "12FnAud";
        };

        bt_nav_music {
            // -----------------------------------------------------------------------------------------
            // | !     |  @  |  #  |  $  |  %  |     |  ^  |  &  |  *  |  (  |  )  |
            // | BT1   | BT2 | BT3 | BT4 | BT5 |     | LFT | DWN |  UP | RGT |     |
            // | BTCLR |     |     |     |     |     |     |     |     |     |     |
            //               | GUI |     | SPC |     | ENT | ESC | TAB |

            display-name = "BT_Nav";
            bindings = <
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3      &bt BT_SEL 4    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
  &kp LCTRL     &kp LSHFT     &kp LALT      &kp LWIN          &kp F11         &kp LA(F4)    &kp F5        &kp HOME      &kp UP        &kp END
  &kp LCTRL     &kp LSHFT     &kp LALT      &kp LWIN          &kp F12         &kp C_VOL_DN  &kp C_VOL_UP  &kp LEFT      &kp DOWN      &kp RIGHT
                              &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT      &bt BT_CLR    &kp C_MUTE    &none
            >;
        };

        firmware {
            bindings = <
  &none  &kp SCROLLLOCK  &kp KP_NUMLOCK  &kp CAPSLOCK  &none    &none  &kp KP_N7  &kp KP_N8    &kp KP_N9  &none
  &none  &none           &kp LALT        &none         &none    &none  &kp KP_N4  &kp KP_N5    &kp KP_N6  &none
  &none  &none           &none           &none         &none    &none  &kp KP_N1  &kp KP_N2    &kp KP_N3  &none
                         &bootloader     &none         &none    &none  &kp KP_N0  &bootloader
            >;

            label = "firmware";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
