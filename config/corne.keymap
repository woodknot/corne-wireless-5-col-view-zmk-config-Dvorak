/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

//#define AS(keycode) &as LS(keycode) keycode

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    //    behaviors {
    //        as: auto_shift {
    //            compatible = "zmk,behavior-hold-tap";
    //            #binding-cells = <2>;
    //            tapping_term_ms = <200>;
    //            quick_tap_ms = <0>;
    //            flavor = "tap-preferred";
    //            bindings = <&kp>, <&kp>;
    //        };
    //    };

    combos {
        compatible = "zmk,combos";

        Bootloader_Left {
            bindings = <&bootloader>;
            key-positions = <0 1 32>;
            layers = <3 1 2>;
        };

        Bootloader_Right {
            bindings = <&bootloader>;
            key-positions = <8 9 33>;
            layers = <3 1 2>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <21 22>;
            layers = <0 1 2>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
            layers = <0 1 2>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
            layers = <0 1 2>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            layers = <0 1 2 3>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <29 28>;
            layers = <0>;
        };

        grave_tilde {
            bindings = <&kp GRAVE>;
            key-positions = <0 10>;
            layers = <0>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
            layers = <0 1 2>;
        };

        question {
            bindings = <&kp QMARK>;
            key-positions = <1 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U   |  I   |  O   | P |
            // |  A  |  S  |  D  |  F  |  G  |     |  H  |  J   |  K   |  L   | ' | 
            // |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M   | CTRL | META | . |
            //             | GUI | LWR | SPC |     | ENT | RSE  | BSPC |

            display-name = "Base";
            bindings = <
  &lt 3 SQT            &kp COMMA     &kp DOT       &kp P      &kp Y                   &kp F             &kp G        &kp C        &kp R        &kp L
  &kp A                &kp O         &kp E         &kp U      &kp I                   &kp D             &kp H        &kp T        &kp N        &kp S
  &mt LCTRL SEMICOLON  &mt LSHIFT Q  &mt LALT J    &kp K      &kp X                   &kp B             &kp M        &kp W        &mt RSHFT V  &mt RCTRL Z
                                     &mt LWIN TAB  &lt 1 DEL  &mt LSHIFT BACKSPACE    &mt RSHIFT MINUS  &lt 2 SPACE  &lt 3 ENTER
            >;
        };

        nav_num {
            // -----------------------------------------------------------------------------------------
            // | 1! |  2@ |  3# |  4$ |  5% |     |  6^ |  7& |  8* |  9(  |  0)  |
            // | -_ |  =+ |  {  |  [  |  (  |     |  )  |  ]  |  }  |  /?  |  \|  |
            // | `~ |     |     |  ,< |  :  |     |  ;  |  .> | CTRL| META |      |
            //            | GUI | ESC | SPC |     | ENT |     | TAB |

            display-name = "Raise";
            bindings = <
  &kp HOME      &kp PSCRN  &kp UP         &kp K_UNDO  &kp LC(X)    &kp ASTRK         &kp N7  &kp N8     &kp N9  &kp SLASH
  &mt LWIN END  &kp LEFT   &kp DOWN       &kp RIGHT   &kp LC(C)    &kp PLUS          &kp N4  &kp N5     &kp N6  &kp MINUS
  &kp LCTRL     &kp LSHFT  &kp LALT       &kp LSHFT   &kp LC(V)    &kp DOT           &kp N1  &kp N2     &kp N3  &mt LCTRL COMMA
                           &kp BACKSPACE  &kp ESC     &none        &mt RSHIFT EQUAL  &kp N0  &kp ENTER
            >;
        };

        num_fn {
            bindings = <
  &kp F1     &kp F2     &kp F3             &kp F4    &kp F5      &kp F6           &kp F7    &kp F8         &kp F9     &kp F10
  &kp N1     &kp N2     &kp N3             &kp N4    &kp N5      &kp N6           &kp N7    &kp N8         &kp N9     &kp N0
  &kp LCTRL  &kp LSHFT  &mt LEFT_ALT LBKT  &kp LPAR  &kp LBRC    &kp RIGHT_BRACE  &kp RPAR  &mt RALT RBKT  &kp RSHFT  &kp RCTRL
                        &kp PIPE           &kp FSLH  &kp BSLH    &none            &none     &none
            >;

            label = "Lower";
        };

        settings {
            // -----------------------------------------------------------------------------------------
            // | !     |  @  |  #  |  $  |  %  |     |  ^  |  &  |  *  |  (  |  )  |
            // | BT1   | BT2 | BT3 | BT4 | BT5 |     | LFT | DWN |  UP | RGT |     |
            // | BTCLR |     |     |     |     |     |     |     |     |     |     |
            //               | GUI |     | SPC |     | ENT | ESC | TAB |

            display-name = "Tri";
            bindings = <
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3      &bt BT_SEL 4    &none  &none     &none     &none     &none
  &mo 4         &kp LBKT      &kp LPAR      &kp LBRC          &none           &none  &kp RBRC  &kp RPAR  &kp RBKT  &mo 4
  &bt BT_CLR    &none         &none         &kp C_PLAY_PAUSE  &none           &none  &none     &none     &none     &none
                              &kp C_MUTE    &kp C_VOL_DN      &kp C_VOL_UP    &none  &none     &none
            >;
        };

        firmware {
            bindings = <
  &none  &none  &none  &none  &none          &none        &none  &none  &none  &none
  &none  &none  &none  &none  &bootloader    &bootloader  &none  &none  &none  &none
  &none  &none  &none  &none  &none          &none        &none  &none  &none  &none
                &none  &none  &none          &none        &none  &none
            >;

            label = "firmware";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
